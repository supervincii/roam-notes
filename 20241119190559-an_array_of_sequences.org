:PROPERTIES:
:ID:       9212342b-6852-42d0-b1f0-e1b7b671cad6
:END:
#+title: an-array-of-sequences
#+tags: [[id:2ed691f2-3b34-4d88-90d5-f0d8554c1bcb][python]]

* Table of Contents :toc@4:
- [[#overview-of-built-in-sequences][Overview of Built-In Sequences]]
  - [[#sequence-types][Sequence Types]]
    - [[#container-sequences][Container Sequences]]
    - [[#flat-sequences][Flat Sequences]]
    - [[#mutable-and-immutable-sequences][Mutable and Immutable Sequences]]
- [[#list-comprehensions-and-generator-expressions][List Comprehensions and Generator Expressions]]
  - [[#list-comprehensions-and-readability][List Comprehensions and Readability]]
  - [[#local-scope-within-comprehensions-and-generator-expressions][Local Scope Within Comprehensions and Generator Expressions]]
  - [[#listcomps-vs-map-and-filter][Listcomps vs ~map~ and ~filter~]]
    - [[#cartesian-products][Cartesian Products]]
  - [[#generator-expressions][Generator Expressions]]
  - [[#tuples][Tuples]]
    - [[#tuples-as-records][Tuples as Records]]
    - [[#tuples-as-immutable-lists][Tuples as Immutable Lists]]
  - [[#unpacking-sequences-and-iterables][Unpacking Sequences and Iterables]]
    - [[#using--to-grab-excess-items][Using * to Grab Excess Items]]
    - [[#unpacking-with--in-function-calls-and-sequence-literals][Unpacking with * in Function Calls and Sequence Literals]]
    - [[#nested-unpacking][Nested Unpacking]]
  - [[#pattern-matching-with-sequences][Pattern Matching with Sequences]]
    - [[#pattern-matching-sequences-in-an-interpreter][Pattern Matching Sequences in an Interpreter]]

* Overview of Built-In Sequences

** Sequence Types

- Container sequences
  - Can hold items of different types, including nested containers.
  - list, tuple, collections.deque
- Flat sequences
  - Hold items of one simple type.
  - str, bytes, array.array

*** Container Sequences

Hold references to the objects it contains, which may be of any type.

A ~tuple~ for example has an array of references to other Python objects. Each element points to the in memory header of each Python object.

It is the same concept as a linked list, or probably an array of pointers in C.

*** Flat Sequences

Stores the value of its contents in its own memory space. Not as distinct Python objects.

More compact but limited to holding primitive machine values, like bytes, integers, and floats.

It is built like an array in C, where elements are stored in memory without indirection.

We can leverage this if the item to store is a collection of primitive values.

#+begin_quote
Every Python object in memory has a header with metadata. A ~float~ has a value field and two metadata fields:

- ~ob_refcnt~: the object's reference count
- ~ob_type~: a pointer to the object's type
- ~ob_fval~: a C double holding the value of the float
#+end_quote

*** Mutable and Immutable Sequences

- Mutable sequences
  - list, bytearray, array.arrayy, collections.deque
- Immutable sequences
  - tuple, str, bytes

The most fundamental sequence type is the list, a mutable container.

* List Comprehensions and Generator Expressions

List comprehension is a quick way to build a sequence (lists) or a generator expression (for other types of sequences).

** List Comprehensions and Readability

Example: Build a list of Unicode code points from a string

#+begin_src python
  # using a for loop
  symbols = '!@#$%^'
  codes = []
  for symbol in symbols:
      codes.append(ord(symbol))
  ...

  >>> codes
  [33, 64, 35, 36, 37, 94]
#+end_src

#+begin_src python
  # using list comprehension
  symbols = '!@#$%^'
  codes = [ord(symbol) for symbol in symbols]
  ...

  >>> codes
  [33, 64, 35, 36, 37, 94]
#+end_src

A ~for~ loop may be used to do lots of different things: scanning a sequence to count or pick items, computing aggregates (sums, averages), etc. Listcomp is more explicit. Its goal is always to build a new list.

** Local Scope Within Comprehensions and Generator Expressions

Listcomps, genexprs, and their siblings ~set~ and ~dict~ comprehensions, have a local scope to hold the variables assigned in the ~for~ clause.

Variables however assingned with the "Walrus operator" := remain accessible after those comprehensions or expressions return, unlike local variables in a function.

#+begin_quote
:= is used to allow assignment of a value to a variable as part of an expression
#+end_quote

#+begin_src python
  x = 'ABC'
  codes = [ord(x) for x in x]
  >>> x
  'ABC'
  >>> codes
  [65, 66, 67]

  codes = [last := ord(c) for x in x]
  >>> last
  67
  >>> c
#+end_src

** Listcomps vs ~map~ and ~filter~

Listcomps do everything the ~map~ and ~filter~ functions do, w/o the contortions of the functionally challenged Python ~lambda~.

#+begin_src python
  symbols = '!@#$%^'
  beyond_ascii = [ord(s) for s in symbols if ord(s) > 37]
  >>> beyond_ascii
  [64, 94]

  beyond_ascii = list(filter(lambda c: c > 37, map(ord, symbols)))
  >>> beyond_ascii
  [64, 94]
#+end_src

*** Cartesian Products

Listcomps can build lists from the cartesian products of two or more iterables.

Example:

#+begin_src python
  colors = ['black', 'white']
  sizes = ['S', 'M', 'L']
  tshirts = [(color, size) for color in colors for size in sizes]
#+end_src

** Generator Expressions

To initialize tuples, array, and other types of sequences, we could also start from a listcomp, but genexp saves memory because it yields items one by one using the iterator protocol instead of building a new list just to feed another constructor.

Uses the same syntax as listcomps but enclosed in parentheses instead of brackets.

#+begin_src python
  symbols = '!@#$%^'
  tuple(ord(symbol) for symbol in symbols)

  import array
  array.array('I', (ord(symbol) for symbol in symbols))

  colors = ['black', 'white']
  sizes = ['S', 'M', 'L']
  for tshirt in (f'{c} {s}' for c in colors for s in sizes):
      print(tshirt)
#+end_src

** Tuples

Tuples are not just immutable lists, they can also be used as records with no field names.

*** Tuples as Records

Tuples hold records: each item in the tuple holds the data for one field, and the position of the item gives its meaning.

When using tuples as a collection of fields, the number of items is usually fixed and the order is important.

#+begin_src python
  lax_coordinates = (33.9425, -118.408056)
  city, year, pop, chg, area = ('Tokyo', 2003, 32_450, 0.66, 8014)
  traveler_ids = [('USA', '31195855'), ('BRA', 'CE342567'), ('ESP', 'XDA205856')]

  for passport in sorted(traveler_ids):
      print('%s/%s' % passport)

  for country,_ in traveler_ids:
      print(country)
#+end_src

*** Tuples as Immutable Lists

Key benefits:
1. Clarity
   - Seeing a tuple will signify that its length will never change.
2. Performance
   - Tuples use less memory than the list of the same length, allowing for optimizations.


Be aware however that the immutability of a tuple only applies to the references contained in it. Those cannot be deleted or replaced. If one of the references points to a mutable object, and that object is changed, then the value of the tuple changes.

Mutable items in a tuple can be a source of bugs. An object is only hashable if its value cannot ever change. An unhashable tuple cannot be inserted as a ~dict key~ or a ~set~ element.

To determin if a tuple (or any object) has a fixed value, we can use the hash built-in to create a fixed function:

#+begin_src python
  def fixed(o):
      try:
          hash(o)
      except TypeError:
          return False
      return True
#+end_src

Tuples offer some *performance advantages*:
- Evaluating a tuple literal allows Python go generate bytecode for a tuple constant in one operation. For list literals, the generated bytecode pushes each element as a separate constant to the data stack then builds the list.
- ~tuple(t)~ simply returns the reference to the same ~t~. ~list(l)~ constructor must create a new copy of ~l~.
- Tuple instances are allocated the exact memory space. Lists are allocated with room so spare for future appends.
- References to the items in the tuple are stored in an array in the tuple struct. Lists holds a pointer to an array of references and stored elsewhere.

** Unpacking Sequences and Iterables

Unpacking is important because it avoids unnecessary and error-prone use of indexes to extract elements from sequences.

Parallel assignment; assigning items from an iterable to a tuple of variables:

#+begin_src python
  lax_coordinates = (33.9425, -118.408056)
  latitude, longitude = lax_coordinates # unpacking

  # swapping variables without using a temporary variable
  b, a = a, b
#+end_src

Prefixing with * when calling a function:

#+begin_src python
  >>> t = (20, 8)
  >>> divmod(*t)
  (2, 4)

  >>> quotient, remainder = divmod(*t)
  >>> quotient, remainder
  (2, 4)
#+end_src

Using the function ~os.path.split()~, where it builds a tuple (path, last_part) from the filesystem path:

#+begin_src python 
  import os

  _, filename = os.path.split('/home/vinci/.ssh/id_rsa.pub')

  >>> filename
  'id_rsa.pub'
#+end_src

*** Using * to Grab Excess Items

Same concept for function definitions with ~*args~ to grab arbitrary excess arguments.

Using * in parallel assignment:

#+begin_src python
  a, b, *rest = range(5)
  >>> a, b, rest
  (0, 1, [2, 3, 4])

  a, b, *rest = range(2)
  >>> a, b, rest
  (0, 1, [])
#+end_src

*** Unpacking with * in Function Calls and Sequence Literals

#+begin_src python
  def fun(a, b, c, d, *rest):
      return a, b, c, d, rest

  >>> fun(*[1, 2], 3, *range(4, 7))
  (1, 2, 3, 4, (5, 6))
#+end_src

*** Nested Unpacking

#+begin_src python
  metro_areas = [
      ('Tokyo', 'JP', 36.933, (35.689722, 139.691667)),
      ('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889)),
      ('Mexico City', 'MX', 20.142, (19.433333, -99.133333)),
      ('New York-Newark', 'US', 20.104, (40.808611, -74.020386)),
      ('Sao Paolo', 'BR', 19.649, (-23.547778, -46.635833)),
  ]

   def main():
       print(f'{"":15} | {"latitude":>9} | {"longitude":>9}')
       for name, _, _, (lat, lon) in metro_areas:
           if lon <= 0:
               printf(f'{name:15} | {lat:9.4f} | {lon:9.4f}')

  if __name__ == '__main__':
      main()
#+end_src

** Pattern Matching with Sequences

We can use pattern matching with the ~match/case~ statement.

Suppose we are designing a robot that accepts commands sent as sequences of words and numbers like BEEPER 440 3. After splitting we get ~[BEEPER, 440, 3]~.

To handle the message:

#+begin_src python
  def handle_command(self, message):
      match message:
          case ['BEEPER', frequency, times]:
              self.beep(times, frequency)
          case ['NECK', angle]:
              self.rotate_neck(angle)
          case ['LED', ident, intensity]:
              self.leds[ident].set_brightness(ident, intensity)
          case ['LED', ident, red, green, blue]:
              self.leds[ident].set_color(ident, red, green, blue)
          case _:
              raise InvalidCommand(message)
#+end_src

~match/case~ is essence is a ~switch~ statement in C. ~case _~ is the default ~case~.

The key improvement of match over switch is *destructuring*--a more advanced form of unpacking.

Example of destructuring in nested tuples:

#+begin_src python
  metro_areas = [
      ('Tokyo', 'JP', 36.933, (35.689722, 139.691667)),
      ('Delhi NCR', 'IN', 21.935, (28.613889, 77.208889)),
      ('Mexico City', 'MX', 20.142, (19.433333, -99.133333)),
      ('New York-Newark', 'US', 20.104, (40.808611, -74.020386)),
      ('Sao Paolo', 'BR', 19.649, (-23.547778, -46.635833)),
  ]

   def main():
       print(f'{"":15} | {"latitude":>9} | {"longitude":>9}')
       for record in metro_areas:
           # the subject is a sequence in this case 'record'
           match record:
               # the subject and the pattern have the same number of items and;
               # each corresponding item matches, including nested items
               case [name, _, _, (lat, lon)] if lon <= 0:
                   printf(f'{name:15} | {lat:9.4f} | {lon:9.4f}')
#+end_src

In the standard libary, these are the types compatible with sequence patterns:
- list
- tuple
- memoryview
- range
- array.array
- collections.deque

Unlike unpacking, patterns don't destructure iterables that are not sequences (such as iterators).

We can make the patterns more specific by adding type information.

#+begin_src python
  case [str(name), _, _, (float(lat), float(lon))]:
#+end_src

The expressions above look like constructor calls, which we'd use to convert name and lat to ~str~ and ~float~. In the context of a pattern, that syntax perform a runtime type check.

If we want to match any subject sequence starting with a ~str~ and ending with a nested sequence of two ~floats~, we can write:

#+begin_src python
  case [str(name), *_, (float(lat), float(lon))];
#+end_src

*** Pattern Matching Sequences in an Interpreter

An example from ~lis.py~, an interpreter for the Scheme dialect of Lisp.

The two main functions of ~lis.py~ are ~parse~ and ~evaluate~. The parser takes Scheme parenthesized expressions and returns Python lists.

#+begin_src python
  parse ('''
  (define double
      (lambda (n)
          (* n 2)))
  ''')

  # OUTPUT
  ['define', 'double', ['lambda', ['n'], ['*', 'n', 2]]]
#+end_src

The evaluator then takes this lists and executes them.

~lis.py~ matching patterns without ~match/case~

#+begin_src python
  def evaluate(exp: Expression, env: Environment) -> Any:
      "Evaluate an expression in an environment."
      # variable reference
      if isinstance(exp, Symbol):
          return env[exp]
      # ... lines omitted
      # (quote exp)
      elif exp[0] == 'quote':
          (_, x) = exp
          return x
      elif exp[0] == 'if':
          (_, test, consequence, alternative) = exp
          if evaluate(test, env):
              return evaluate(consequence, env)
          else:
              return evaluate(alternative, env)
      elif exp[0] == 'lambda':
          (_, name, value_exp) = exp
          return Procedure(parms, body, env)
      elif exp[0] == 'define':
          (_, name, value_exp) = exp
          env[name] = evaluate(value_exp, env)
      # ... more lines omitted
#+end_src
