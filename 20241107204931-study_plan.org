:PROPERTIES:
:ID:       b53d8213-f0e2-4b29-99de-1c8952bf7d42
:END:
#+title: study-plan

* 2025 Goals

- Be a fucking beast coding in Python
- Work on API and UI of Blinxus

* 2025 Study Plan

** Phase 1 - Strengthening Python Fundamentals

*** Topics

- Advanced Python
  - Fluent Python
- OOP & Design Patterns
  - Head First Design Patterns
- DSA
  - Grokking Algorithms
  - LeetCode

*** Projects

1. Python Utilities Library
   - Description
     - Build a libary of utility functions and classes that extend Python's built-in functionalities.
   - Focus:
     - Implement custom iterators and generators
     - Use decorators to enhance functions
     - Create context managers for resource management
   - Outcome:
     - A Python package that can be installed and used in other projects.
2. OOP Design Patterns Implementation
   - Description:
     - Implement common design patterns (Singleton, Factory, Observer, Strategy) in Python.
   - Focus:
     - Understand each pattern's purpose and use case.
     - Apply patterns to solve specific problems.
   - Outcome:
     - A set of Python scripts demonstrating each design pattern with examples.
3. Algorithm Implementation in Python
   - Description:
     - Implement algorithms from "The Algorithm Design Manual" in Python
   - Focus:
     - Sorting
     - Searching
     - Basic graph algorithms
   - Outcome:
     - A collection of algorithms implementations with documentation and test cases.

** Phase 2 - Web Development with Python

*** Topics

- Web frameworks in Python
  - FastAPI
- Data validation in Pydantic
- SQL databases and ORM
  - SQLAlchemy for database interaction
- Docker for containerization
- Basic Linux and Bash scripting
  - The Linux Command Line by William Shotts

*** Projects

1. ToDo List API with FastAPI
   - Description:
     - Build a RESTful API for a ToDo application
   - Focus:
     - Define API endpoints using FastAPI
     - Use Pydantic models for data validation
     - Implement CRUD operations with a PostgreSQL database using SQLAlchemy
   - Outcome:
     - A fully functional API with documentation (using OpenAPI/Swagger)
2. Containerize the Application with Docker
   - Description:
     - Containerize the application.
   - Focus:
     - Write a Dockerfile to build the application image.
     - Use Docker Compose to manage multi-container setups (API and database).
   - Outcome:
     - Dockerized application that can easily be deployed and run.
3. Deploy the Application on AWS
   - Description:
     - Deploy the Dockerized application on AWS using Elastic Beanstalk or ECS
   - Focus:
     - Set up AWS account and understand core services
     - Use AWS CLI and management console
   - Outcome:
     - Live API endpoint accessible over the internet.
4. Basic Bash Scripts for Automation
   - Description:
     - Write Bash scripts to automate deployment and management tasks.
   - Focus:
     - Automate Docker image building and pushing to AWS ECR
     - Automate deployment commands
   - Outcome:
     - A set of scripts that simplify development and deployment workflows.

** Phase 3 - Intermediate Data Structures and Algorithms

*** Topics

- Intermediate algorithms
  - Resource:
    - The Algorithm Design Manual
  - Graph algorithms
  - Dynamic programming
- Advanced data structures
  - Trees
  - Heaps
  - Hash tables
- Algorithm analysis and Big O notation
- Testing methodologies
  - Unit testing with pytest
  - Integration testing
    - Resource:
      - Test Automation University

*** Projects

1. Algorithm Implementations
   - Description:
     - Implement more complex algorithms and data structures in Python
   - Focus:
     - Implement graph traversal algorithms (Dijkstra's, A* search)
     - Implement dynamic programming solutions (e.g., Knapsack problem)
   - Outcome:
     - A repository of advanced algorithms with explanations and time complexity.
2. Data Structures Library
   - Description:
     - Create a library of data structures implemented from scratch.
   - Focus:
     - Implement binary search trees, heaps, and hash tables.
     - Ensure each data structure is efficient and well tested.
   - Outcome:
     - A Python package containing custom data structures with documentation and tests.
3. Testing the ToDo List API
   - Description:
     - Write unit and integration tests for the existing ToDo list API.
   - Focus:
     - Use pytest to write test cases.
     - Achieve high code coverage
     - Implement continuous integration using GitHub Actions or Travis CI
   - Outcome:
     - A robust test suite ensuring the API's reliability

** Phase 4 - Advanced Python and Backend Development

*** Topics

- Advanced backend concepts
  - Resource:
    - Effective Python by Brett Slatkin
    - High Performance Python by Micha Gorelick & Ian Ozsvald
  - Asynchronous programming with asyncio
  - Security in web applications
  - Performance optimization
- Databases and SQL (Intermediate to Advanced)
  - Resource:
    - SQLZoo
  - Advanced SQL queries
  - Database indexing and optimization
- Kubernetes basicss
  - Kubernetes: Up and Running by Brenda Burns, Joe Beda, and Kelsey Hightower
- End-to-End and A/B Testing
- Linux system administration

*** Projects

1. Async Task Manager API
   - Description:
     - Enhance the ToDo List API to handle asynchronous tasks (e.g., sending emails, background processing)
   - Focus:
     - ~asyncio~ and ~aiohttp~ for asynchronous endpoints
     - Implement task queues with Celery and Redis
   - Outcome:
     - An API capable of handling high loads with improved performance
2. Database Optimization
   - Description:
     - Optimize the database interactions in your API
   - Focus:
     - Analyze query performance using EXPLAIN plans.
     - Implement indexing strategies
     - Handle database migrations and versioning
   - Outcome:
     - A more efficient database layer with reduced query times
3. Deploying on Kubernetes
   - Description:
     - Containerize you application with Docker and deploy it on a Kubernetes cluster
   - Focus:
     - Learn Kubernetes concepts like pods, deployments, and services.
     - Use *Minikube* for local testing
     - Deploy on a cloud provider's Kubernetes service (e.g., AWS EKS)
   - Outcome:
     - A scalable application running on Kubernetes
4. Advanced Testing
   - Description:
     - Implement E2E tests and set up A/B testing for your application
   - Focus:
     - Use tools like Selenium and Cypress for E2E testing
     - Understand and implement A/B testing strategies
   - Outcome:
     - A comprehensive testing suite ensuring application quality
       
* 2026 Study Plan

Year 2: Go Focus
Phase 5: Learning Go Basics (Months 13-15)

Topics:

    Go language fundamentals
        Syntax and basic constructs
        Concurrency with goroutines and channels
    Standard library and commonly used packages
    Error handling in Go
    Introduction to REST APIs in Go

Resources:

    "The Go Programming Language" by Alan A. A. Donovan and Brian W. Kernighan
    Go By Example (https://gobyexample.com/)
    Tour of Go (https://tour.golang.org/)
    Go documentation (https://golang.org/doc/)

Projects:

    Command-Line Application in Go
        Description: Build a CLI tool (e.g., a simple file manager or a task runner).
        Focus Areas:
            Parse command-line arguments using flag or cobra package.
            Read from and write to files.
            Handle errors gracefully.
        Outcome: A functional CLI application showcasing Go basics.

    Concurrent Downloader
        Description: Create a tool that downloads files concurrently from the internet.
        Focus Areas:
            Use goroutines and channels for concurrency.
            Manage synchronization and avoid race conditions.
        Outcome: A performant downloader that demonstrates Go's concurrency features.

    Simple REST API in Go
        Description: Build a basic REST API similar to the ToDo List API but in Go.
        Focus Areas:
            Use frameworks like Gin or Echo.
            Connect to a PostgreSQL database.
            Implement CRUD operations.
        Outcome: A Go-based API with similar functionality to your Python API.

Phase 6: Compilers and Interpreters in Go (Months 16-18)

Topics:

    Compiler theory
        Lexical analysis
        Parsing techniques
        Abstract Syntax Trees (ASTs)
    Code generation
    Interpreters vs. Compilers

Resources:

    "Writing An Interpreter In Go" by Thorsten Ball
    "Writing A Compiler In Go" by Thorsten Ball
    "Crafting Interpreters" by Robert Nystrom (for additional insights)

Projects:

    Monkey Language Interpreter
        Description: Follow "Writing An Interpreter In Go" to build an interpreter for the Monkey programming language.
        Focus Areas:
            Implement lexer and parser.
            Build an AST.
            Execute code based on the AST.
        Outcome: A fully functional interpreter capable of running Monkey language scripts.

    Monkey Language Compiler
        Description: Continue with "Writing A Compiler In Go" to build a compiler for the Monkey language.
        Focus Areas:
            Generate bytecode from the AST.
            Implement a virtual machine to execute bytecode.
        Outcome: A compiler and virtual machine that can compile and run Monkey language programs.

    Custom Language Extension
        Description: Extend the Monkey language with additional features (e.g., new data types, control structures).
        Focus Areas:
            Modify the lexer, parser, and interpreter/compiler.
            Ensure backward compatibility.
        Outcome: An enhanced programming language with additional capabilities.

Phase 7: Advanced Go and Backend Development (Months 19-21)

Topics:

    Advanced Go concepts
        Reflection
        Generics (if using Go 1.18+)
    Microservices architecture
    gRPC for communication
    Advanced database interactions
    Testing in Go
        Unit tests
        Benchmarking
        Race condition detection

Resources:

    "Go in Practice" by Matt Butcher and Matt Farina
    gRPC documentation (https://grpc.io/docs/languages/go/quickstart/)
    Go testing documentation (https://golang.org/pkg/testing/)

Projects:

    Microservices Application in Go
        Description: Build a set of microservices that communicate using gRPC.
        Focus Areas:
            Define service contracts using Protocol Buffers.
            Implement services for different domains (e.g., user service, order service).
            Handle inter-service communication securely.
        Outcome: A microservices-based application demonstrating Go's strengths in building scalable services.

    Advanced Database Handling
        Description: Integrate advanced database features into your services.
        Focus Areas:
            Use transaction management.
            Implement database sharding or replication if applicable.
            Optimize database queries.
        Outcome: Efficient and reliable data layer for your Go services.

    Testing and Benchmarking Go Applications
        Description: Write comprehensive tests and benchmarks for your Go code.
        Focus Areas:
            Achieve high code coverage.
            Use go test and go benchmark.
            Detect and fix race conditions using the race detector.
        Outcome: High-quality codebase with strong testing practices.

Phase 8: Capstone Project (Months 22-24)

Project: Develop a Full-Scale Infrastructure as Code Platform

Description:

Integrate all your skills and knowledge to build an Infrastructure as Code (IaC) platform inspired by Pulumi. This platform allows users to define cloud infrastructure using code, supporting both Python and Go.

Components:

    Multi-Language SDKs
        Develop SDKs in Python and Go:
            Allow users to define infrastructure using their preferred language.
            Ensure idiomatic usage in both languages.
        Features:
            Resource definitions (compute, storage, networking)
            Deployment configurations
            Error handling and logging

    Infrastructure Orchestration Engine
        Build the core engine:
            Parse and interpret the infrastructure definitions.
            Use graph algorithms to manage resource dependencies.
        Technologies:
            Implement in Go for performance.
            Use your knowledge from compiler construction to parse configurations.

    Cloud Provider Integration
        Support for AWS and Kubernetes:
            Use AWS SDKs and Kubernetes APIs.
            Implement resource provisioning, updating, and deletion.
        Features:
            Handle authentication and authorization.
            Manage state and handle drift detection.

    Command-Line Interface (CLI)
        Develop a CLI tool:
            Commands for initializing projects, previewing changes, and deploying.
            Support for configuration files and environment variables.
        Technologies:
            Use Go's cobra package for building the CLI.
            Provide autocomplete and help documentation.

    Documentation and Examples
        Create comprehensive documentation:
            User guides for getting started.
            API references for the SDKs.
        Provide sample projects:
            Demonstrate common infrastructure setups.
            Include examples for both Python and Go users.

Focus Areas:

    Software Architecture:
        Design for scalability and maintainability.
        Use design patterns and best practices.

    Cloud Concepts:
        Implement infrastructure provisioning securely and efficiently.
        Handle errors and retries gracefully.

    Testing:
        Write extensive unit and integration tests.
        Simulate deployments to avoid unnecessary charges.

Outcome:

A fully functional IaC platform supporting Python and Go.
Demonstration of your ability to integrate complex systems.
A showcase project that aligns closely with Pulumi's domain.
