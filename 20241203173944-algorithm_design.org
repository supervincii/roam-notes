:PROPERTIES:
:ID:       e100f364-a1e9-486d-82f0-823b3e0d02e7
:END:
#+title: Algorithm Design
#+tags: [[id:5a2a8786-c4c9-44b8-9868-e7633631aebe][DSA]]

* Introduction

Algorithms are a procedure to accomplish a *specific* task.

Three desirable properties for a good algorithm:
1. Correct
2. Efficient
3. Easy to implement

With designing algorithms, the "most obvious" is not necessarily the correct one.

Seeking counterexamples that break /pretender/ algorithms is an important part of the algorithm design process.

* Reasoning about Correctness

A *proof* is a tool to distinguish correct algorithms from incorrect ones.

Parts of a mathematical proof:
- Clear and precise statement of what you are trying to prove
- Set of assumptions of things which are taken to be true
- Chain of reasoning: takes you from assumption to the statement

** Expressing Algorithms

1. English/Natural Language
2. Pseudocode
3. Real programming language

If your idea is not clearly revealed when you express an algorithm, then you are using too low-level a notation to describe it.

** Problems and Properties

Parts of problem specifications:
1. The set of allowed input instances
2. The required properties of the algorithm's output

** Demonstrating Incorrectness

The best way to prove incorrect algorithms is to produce an instance in which it yields an incorrect answer, called *counter-examples*.

Good counter-examples have two important properties:
1. Verifiability
   - Calculate what the answer of the algorithm will be
   - Display a better answer to prove the algorithm did not find it
2. Simplicity
   - Simplify the counter example down to its essence (e.g., reducing the number of relement from five to two.)

*** Techniques for hunting counter-examples

- THINK SMALL
  - When algorithms fail, there is usually a very simple example on which they fail
  - Look at several small examples
- THINK EXHAUSTIVELY
- HUNT FOR THE WEAKNESS
  - Think about why an algorithm might prove the wrong thing to do
- GO FOR A TIE
  - Some algorithms look for the "biggest". Provide instances for instances where it might not work for that specific algorithm like everything in a set is the exact same size.
- SEEK EXTREMES
  - Verify counter examples by providing extreme measures.

* Modeling the Problem

Modeling is the art of formulating applications in terms of precisely described, well understood problems.

** Combinatorial Objects

- Permutations
  - Arrangement or orderings of items
  - {1, 4, 3, 2} & {4, 3, 2, 1} are two distinct permutations
  - Likely the object in question for problems that seek "arrangement", "tour", "ordering", or "sequence"
- Subsets
  - Selections from a set of items
  - {1, 3, 4} & {2} are two distinct subsets of the first four integers
  - Order does not matter
  - {1, 3, 4} & {4, 3, 1} are considered identical
  - Likely the object in question for problems that seek "cluster", "collection", "committee", "group", "packaging", or "selection"
- Trees
  - Represent hierarchical relationship between items
  - Likely the object in question for problems that seek "hierarchy", "dominance relationship", "ancestor/descendant relationship", or "taxonomy"
- Graphs
  - Represent relationships between arbitrary pairs of objects
  - Likely the object in question for problems that seek a "network", "circuit", "web", or "relationship"
- Points
  - Represent locations in some geometric space
  - "positions", "data records", "locations"
- Polygons
  - Represent regions in some geometroc spaces
  - "shapes", "regions", "configurations", or "boundaries"
- Strings
  - Represent sequence of characters or patterns
  - "text", "characters", "patterns", or "labels"

Modeling your application in terms of well-defined structures and algorithms is the most important single step towards a solution.

** Recursive Objects

Learning to think recursively is learning to look for big things that are made from smaller things, of exactly the same type as the big thing.

- Permutations
  - Delete the first element of a permutation of ~n~ things and you get of the permutation of the remaining ~n-1~ things.
- Subsets
  - Each subset of ~n~ elements contain a subset of ~n-1~ things.
- Trees
  - Deleting a root > a collection of smaller trees
  - Delete any leaf > a slightly smaller tree
- Graphs
  - Delete a vertex > a smaller graph
  - Divide the vertices into two and cut through the edges > two smaller graphs
- Points
  - Point sets are recursive objects
- Polygons
  - Insert a chord between two non adjacent vertices > two smaller polygons
- Strings
  - Delete the first character > smaller string

Recursive descriptions require both decomposition rules and basis cases, namely the specification of the smallest simples objects where the decomposition stops.
